https://leetcode.com/problems/sign-of-the-product-of-an-array/description/


There is a function signFunc(x) that returns:

1 if x is positive.
-1 if x is negative.
0 if x is equal to 0.
You are given an integer array nums. Let product be the product of all values in the array nums.

Return signFunc(product).

 

Example 1:

Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1
Example 2:

Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0
Example 3:

Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1
 

Constraints:

1 <= nums.length <= 1000
-100 <= nums[i] <= 100

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Wrong approach as for larger values the time is exceeding and wrong output.

class Solution {
    public int arraySign(int[] nums) {
        long product=1L;
        for(int i=0;i<nums.length;i++){
            product=product*nums[i];
        }
        
        if(product>0){
            return 1;
        }
        else if(product<0){
            return -1;
        }
        else{
            return 0;
        }
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Correct code:

Time complexity: O(n)
Space complexity: O(1)

check the no of negatives in the array

class Solution {
    public int arraySign(int[] nums) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<0){
                count++;
            }
            if(nums[i]==0){
                return 0;
            }
        }
        if(count%2==0){
            return 1;
        }
        else if(count%2!=0){ //to avoid dummy return just remove this if and return -1
            return -1;
        }
        return 0; //dummy return 
    }
}

