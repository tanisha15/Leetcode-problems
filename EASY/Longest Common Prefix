Prefix-starting with that string-means the string should start with prefix string
Suffix-ending with that string


Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Optimized code:

class Solution {
    public String longestCommonPrefix(String[] strs) {
        int min_length=200;
        int str_length=0;
        String s="";
        for(int i=0;i<strs.length;i++){
            str_length=strs[i].length();
            if(str_length<min_length){
                min_length=str_length;
                s=strs[i];
            }
        }
        for(int i=0;i<strs.length;i++){
            if(!strs[i].startsWith(s)){
                while(!strs[i].startsWith(s)){
                s=s.substring(0,s.length()-1);
                if(s.length()==0){
                    return s;
                }   
            }    
            }
        }
        return s;
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Longest common suffix:

Just make changes
-> endswith 
-> and in substring

class Solution {
    public String longestCommonPrefix(String[] strs) {
        int min_length=200;
        int str_length=0;
        String s="";
        for(int i=0;i<strs.length;i++){
            str_length=strs[i].length();
            if(str_length<min_length){
                min_length=str_length;
                s=strs[i];
            }
        }
        for(int i=0;i<strs.length;i++){
            if(!strs[i].endsWith(s)){
                while(!strs[i].endsWith(s)){
                s=s.substring(1,s.length());
                if(s.length()==0){
                    return s;
                }   
            }    
            }
        }
        return s;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




