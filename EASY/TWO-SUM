Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Brute Force:

Time Complexity: O(n^2)
Space Complexity: O(1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int sum=0;
        int k=0;
        int index[]=new int[2];
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                sum=nums[i]+nums[j];
                if(sum==target){
                    index[k]=i;
                    index[k+1]=j;
                    break;
            }
        }
    }
        return index;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Optimized Approach:

Using hashmap

Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[]=new int[2];
        HashMap<Integer,Integer> map = new HashMap();
        for(int i=0;i<nums.length; i++){
            if (map.containsKey(target-nums[i])) {
                arr[0]=i;
                arr[1]=map.get(target-nums[i]); //gets the value of the key from hashmap
                break;
            }
            map.put(nums[i],i);
        }
        return arr;
    }
}








