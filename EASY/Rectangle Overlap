https://leetcode.com/problems/rectangle-overlap/description/


An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.

 

Example 1:

Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true
Example 2:

Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false
Example 3:

Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false
 

Constraints:

rec1.length == 4
rec2.length == 4
-109 <= rec1[i], rec2[i] <= 109
rec1 and rec2 represent a valid rectangle with a non-zero area.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

36/40 test cases passed for below:

class Solution {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
       int xrec1[]=new int[2];
       int yrec1[]=new int[2];
       int a=0, b=0;
       for(int i=0;i<rec1.length;i++){
        if(i%2==0){
            xrec1[a]=rec1[i];
            a++;
        }
        else{
            yrec1[b]=rec1[i];
            b++;
        }
       }
       int xrec2[]=new int[2];
       int yrec2[]=new int[2];
       int p=0, q=0;
       for(int i=0;i<rec2.length;i++){
        if(i%2==0){
            xrec2[p]=rec2[i];
            p++;
        }
        else{
            yrec2[q]=rec2[i];
            q++;
        }
       }
       int count=0;
       if ((xrec1[0]<=xrec2[0]) && (xrec2[0]<xrec1[1])){
        count++;
       }
       if ((yrec1[0]<=yrec2[0]) && (yrec2[0]<yrec1[1]) || (yrec2[0]<=yrec1[0]) && (yrec1[0]<yrec2[1]))  {
        count++;
       }
       if(count==2){
        return true;
       }
    return false;
    }  
 }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

19/40 test cases passed

class Solution {
    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
       int area1= (rec1[2]-rec1[0]) * (rec1[3]-rec1[1]);
       int area2= (rec2[2]-rec2[0]) * (rec2[3]-rec2[1]);
       int check=0;
       if(area1>area2){
         check=area1-area2;
       }
       if(area2>area1){
        check=area2-area1;
       }
       if(check>0){
        return true;
       }
       return false;
 }
}




