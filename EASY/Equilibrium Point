Given an array of integers arr[], the task is to find the first equilibrium point in the array.

The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists. 

Examples:

Input: arr[] = [1, 2, 0, 3]
Output: 2 
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.
Input: arr[] = [1, 1, 1, 1]
Output: -1
Explanation: There is no equilibrium index in the array.
Input: arr[] = [-7, 1, 5, 2, -4, 3, 0]
Output: 3
Explanation: The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.
Constraints:
3 <= arr.size() <= 105
-104 <= arr[i] <= 104

===========================================================================================================


LOGIC:

Optimized Approach (O(n) Time Complexity)
Use a single pass approach with a prefix sum concept:

Key Idea
Compute the total sum of the array.
Traverse the array while maintaining a left sum.
Check if left_sum == total_sum - left_sum - arr[i] at each index.
If yes, return the index. If no equilibrium index is found, return -1.


==========================================================================================


class Solution {
    // Function to find equilibrium point in the array.
    public static int findEquilibrium(int arr[]) {
        // code here
        int left=0;
        int total=0;
        int right=0;
        for (int i=0;i<arr.length;i++){
            total=total+arr[i];
        }
        for(int i=0;i<arr.length;i++){
            right = total-left-arr[i];
            if(left==right){
                return i;
            }
            left=left+arr[i];
        }
        return -1;
    }
}



